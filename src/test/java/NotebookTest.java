//Урок 5. Другие виды тестирования
//        *Задание 1. *Представьте, что вы работаете над разработкой простого приложения для записной книжки,
//        которое позволяет пользователям добавлять, редактировать и удалять контакты.
//        Ваша задача - придумать как можно больше различных тестов (юнит-тесты, интеграционные тесты,
//        сквозные тесты) для этого приложения. Напишите название каждого теста, его тип и краткое описание того,
//        что этот тест проверяет.


public class NotebookTest {

//    для начала UnitTest's
    public void addContactTest() {
//        проверяем что список контактов пустой
//        создаем контакт,
//        сохраняем контакт в список контактов,
//        проверяем что метод успешно завершен (assertTrue)
    }
    public void editContactTest() {
//        забираем контакт из списка контактов
//                редактируем контакт
//                сохраняем редактированный контакт
//                проверяем успех процесса (assertTrue)

    }
    public void deleteContactTest() {
//        забираем контакт из списка контактов
//                удаляем контакт
//                проверяем, что метод удаления не вызывает ошибок
    }
    public void showContactsTest() {
//            проверяем, что контакт отображаются в списке контактов

    }
    public void showContactInfoTest() {
//        забираем контакт из списка контактов
//                проверяем, что контакт отображается информация о забранном контакте
//                проверяем что контакт не удален после просмотра из списка контактов
    }

//============================================================

//     Теперь интеграционные тесты:
        public void addContactTestContainers() {
//        проверяем, что список контактов пустой
//                    создаем контакт,
//                    сохраняем контакт в список контактов,
//                    проверяем, что метод успешно завершен (assertTrue)
//            проверяем наличие контакта в списке контактов,
//            проверяем увеличение количества контактов на 1;

        }

        public void editContactTestContainers() {
//            проверяем, что редактированный контакт успешно сохраняется и сохранение происходит не дублируя а изменяя
//            изначальную информацию о контакте(количество контактов итоговое не изменено, а
//            значения данного контакта изменены и они корректно отображаются).
        }

        public void deleteContactTestContainers() {
//            проверяем, что после удаления контакт отсутствует в БД и не отображается в списке контактов
        }

        public void showContactsTestContainers() {
//            проверяем, что контакт отображаются в списке контактов
//                    проверяем что после просмотра списка база не изменена
        }
        public void showContactInfoTestContainers() {
//                    проверяем, что контакт не удален, не изменен после просмотра из списка контактов
//            и не создал новые контакты и повторный запрос отображжает ту же информацию о контакте,
        }


//=========================================================
    //        Теперь сквозной тест:

    public void ApplicationRunner() {
//        1)Создаем новую записну книгу,
//                проверяем что она пустая,
//                добавляем контакт,
//                проверяем, что контакт добавлен,присутствует в базе и отображается в списке контактов.,
//                редактируем контакт,
//                проверяем, что контакт редактирован и корректно отображается информацию о контакте,
//              пытаемся совершить вызов по контакту проверяем отсутствие ошибок,
//              отправляем сообщение данному контакту проверяем успешное сообщение,
//                удаляем контакт,
//                        проверяем, что контакт удален, информация о контакте полностью удалена в БД и не
//                        отображается в списке контактов.,
//                        проверяем, что список контактов пустой.
//              повторно проверяем, что вызов по контакту проходит, и проверяем успешное сообщение, при этом контакт
//              не должен появиться в списке контактов.
    }




}


//
//        *Задание 2. *Ниже список тестовых сценариев. Ваша задача - определить тип каждого теста
//        (юнит-тест, интеграционный тест, сквозной тест) и объяснить, почему вы так решили.
//        Проверка того, что функция addContact корректно добавляет новый контакт в список контактов"".
//UNIT тест = так как в данном случае мы проверяем функцию addContact корректно добавляет новый контакт, не вызывая при этом ошибок.
//        ""Проверка того, что при добавлении контакта через пользовательский интерфейс,
//        контакт корректно отображается в списке контактов"".
//Интеграционные тесты: так как мы раззматриваем корректное взаимодействие работы 2-х или более блоков программы
//        ""Проверка полного цикла работы с контактом: создание контакта, его редактирование и последующее удаление"".
//Сковозной тесты: так как мы разматриваем весь жизненный цикл контакта в одном методе, сопровоздая его на всем его пути.


